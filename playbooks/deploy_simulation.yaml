- name: Playbook Sanity checks and configuration
  hosts: localhost
  strategy: free
  connection: local
  tasks:
    - name: Test if the type of 'prefix_name' is string
      assert:
        that:
          - prefix_name is regex("^[a-zA-Z0-9\-]*$")
          - prefix_name != "prefix"
        fail_msg: prefix_name is not alphanumeric or is using the default 'prefix' name, please fix the prefix_name and try again
    - name: Test if docker username and password are still default vaules
      assert:
        that:
          - docker_user  != "insert username"
          - docker_password != "insert password"
        fail_msg: docker username or password is currently set as default values, please check both and try again
    - name: check if volume variables are correct
      assert:
        that:
          - volume_name != ""
        fail_msg: volume_deploy is true but no volume_name set, please either set volume_deploy to false or set a name for volume_name
      when: volume_deploy|bool == true
    - name: set_async_status
      set_fact:
        async_time: 0
      when: ansible_async|bool == false
    - name: set_native_status
      set_fact:
        native_network: true
        routed_network: false
      when: network_type == "native"
    - name: set_routed_status
      set_fact:
        native_network: false
        routed_network: true
      when: network_type == "routed"
    - name: set_db_present_true
      set_fact:
        db_present: true
      when: db_persist|bool == true or present|bool == true
    - name: set_db_present_false
      set_fact:
        db_present: false
      when: db_persist|bool == false and present|bool == false
    - name: set_temp_package_args
      set_fact:
        temp_package_arguments: "{{ package_arguments }}"
    - name: set_site
      set_fact:
        temp_package_arguments: "{{ temp_package_arguments | combine(new_item, recursive=true) }}"
      vars:
        new_item: "{ '{{ item.key }}': { 'SITE': '{{ site_name }}' } }"
      when: item.key == "simulator" or item.key == "server" or item.key == "server_cloud"
      with_dict: "{{ temp_package_arguments }}"

- name: Copy manifests to temp directory
  hosts: localhost
  strategy: free
  connection: local
  tasks:
    - copy:
        src: "../packages/postgres_cloud/{{ deployment_version }}.json"
        dest: /tmp/postgres_cloud.json
    - copy:
        src: "../packages/gwm_cloud/{{ deployment_version }}.json"
        dest: /tmp/gwm_cloud.json
    - copy:
        src: "../packages/amr_ui_cloud/{{ deployment_version }}.json"
        dest: /tmp/amr_ui_cloud.json
    - copy:
        src: "../packages/simulator/{{ deployment_version }}.json"
        dest: /tmp/simulator.json


- name: Secrets, Networks
  hosts: localhost
  strategy: free
  connection: local
  tasks:
    - name: Docker Secret
      async: "{{ async_time | default('100') }}"
      poll: 0
      rapyutarobotics.rr_io.secrets:
        name: dockerhub
        present: "{{ present }}"
        type: docker
        username: "{{ docker_user }}"
        password: "{{ docker_password }}"
        email: rss2.admin@rapyuta-robotics.com
      register: docker_secret_id
    - name: Native Network Deployment
      async: "{{ async_time | default('100') }}"
      poll: 0
      rapyutarobotics.rr_io.networks:
        name: "{{ prefix_name }}_native_network"
        present: "{{ present }}"
        type: native_network
        ros_distro: "{{ ros_distro }}"
        resource_type: small
      when: network_type == "native"
      register: native_network_id
    - name: Routed Network Deployment
      async: "{{ async_time | default('100') }}"
      poll: 0
      rapyutarobotics.rr_io.networks:
        name: "{{ prefix_name }}_routed_network"
        present: "{{ present }}"
        type: routed_network
        ros_distro: "{{ ros_distro }}"
        resource_type: small
      when: network_type == "routed"
      register: routed_network_id
    - name: GWM Static Route
      async: 100
      poll: 0
      rapyutarobotics.rr_io.networks:
        name: "{{ prefix_name }}-gwm-cloud"
        present: "{{ present }}"
        type: static_route
      register: gwm_static_route_id
    - name: AMR UI Static Route
      async: 100
      poll: 0
      rapyutarobotics.rr_io.networks:
        name: "{{ prefix_name }}-amr-ui-cloud"
        present: "{{ present }}"
        type: static_route
      register: amr_ui_static_route_id
    - name: Volume Deployment
      async: "{{ async_time | default('100') }}"
      poll: 0
      rapyutarobotics.rr_io.volumes:
        name: "{{ volume_name | default('') }}"
        present: true
        type: default
        capacity: "{{ volume_capacity }}"
      when: volume_deploy|bool == true
      register: postgres_volume_id

- name: POSTGRES, GWM, AMR UI CLOUD, SIMULATOR Packages
  hosts: localhost
  strategy: free
  connection: local
  tasks:
    - name: postgres_cloud package
      async: "{{ async_time | default('1000') }}"
      poll: 0
      rapyutarobotics.rr_io.packages:
        version: "{{ postgres_cloud_version }}"
        name: "{{ prefix_name }}_postgres_cloud"
        present: "{{ db_present }}"
        package_from: manifest_path
        manifest_path: /tmp/postgres_cloud.json
        executables_info:
        - type: manifest
          secret: dockerhub
      register: postgres_cloud_package_id
    - name: gwm cloud package
      async: "{{ async_time | default('1000') }}"
      poll: 0
      rapyutarobotics.rr_io.packages:
        version: "{{ gwm_cloud_version }}"
        name: "{{ prefix_name }}_gwm_cloud"
        present: "{{ present }}"
        package_from: manifest_path
        manifest_path: /tmp/gwm_cloud.json
        executables_info:
        - type: manifest
          secret: dockerhub
      register: gwm_cloud_package_id
    - name: amr_ui_cloud package
      async: "{{ async_time | default('1000') }}"
      poll: 0
      rapyutarobotics.rr_io.packages:
        version: "{{ amr_ui_cloud_version }}"
        name: "{{ prefix_name }}_amr_ui_cloud"
        present: "{{ present }}"
        package_from: manifest_path
        manifest_path: /tmp/amr_ui_cloud.json
        executables_info:
        - type: manifest
          secret: dockerhub
      register: amr_ui_cloud_package_id
    - name: simulator package
      async: "{{ async_time | default('1000') }}"
      poll: 0
      rapyutarobotics.rr_io.packages:
        version: "{{ simulator_version }}"
        name: "{{ prefix_name }}_simulator"
        present: "{{ present }}"
        package_from: manifest_path
        manifest_path: /tmp/simulator.json
        executables_info:
        - type: manifest
          secret: dockerhub
      register: simulator_package_id

- name: POSTGRES, GWM CLOUD, UI, SIMULATOR Deployments
  hosts: localhost
  strategy: free
  connection: local
  tasks:
    - name: POSTGRES Deployment
      async: "{{ async_time | default('2000') }}"
      poll: 0
      rapyutarobotics.rr_io.deployments:
        name: "{{ prefix_name }}_postgres_cloud"
        component_name: postgres
        present: "{{ db_present }}"
        package_name: "{{ prefix_name }}_postgres_cloud"
        package_version: "{{ postgres_cloud_version }}"
        component_params: "{{ temp_package_arguments.postgres_cloud }}"
        volume:
          name: "{{ volume_name | default('') }}"
          mount_path: "/var/lib/postgresql/data"
          sub_path: "data"
      register: db_deploy_id
    - name: GWM CLOUD deployment
      async: "{{ async_time | default('2000') }}"
      poll: 0
      rapyutarobotics.rr_io.deployments:
        name: "{{ prefix_name }}_gwm_cloud"
        component_name: core
        present: "{{ present }}"
        package_name: "{{ prefix_name }}_gwm_cloud"
        package_version: "{{ gwm_cloud_version }}"
        networks:
          static_routes:
            - name: "{{ prefix_name }}-gwm-cloud"
              endpoint_name: GWM_CORE_URL
        depends:
          deployments:
            - "{{ prefix_name }}_postgres_cloud"
        component_params: "{{ temp_package_arguments.gwm_cloud }}"
      register: gwm_cloud_deploy_id
    - name: AMR UI  deployment
      async: "{{ async_time | default('2600') }}"
      poll: 0
      rapyutarobotics.rr_io.deployments:
        name: "{{ prefix_name }}_amr_ui_cloud"
        component_name: amr_ui
        present: "{{ present }}"
        package_name: "{{ prefix_name }}_amr_ui_cloud"
        package_version: "{{ amr_ui_cloud_version }}"
        networks:
          static_routes:
            - name: "{{ prefix_name }}-amr-ui-cloud"
              endpoint_name: AMR_UI
        depends:
          deployments:
            - "{{ prefix_name }}_gwm_cloud"
        component_params: "{{ temp_package_arguments.amr_ui_cloud }}"
      register: amr_ui_cloud_deploy_id
    - name: Simulator  deployment
      async: "{{ async_time | default('2600') }}"
      poll: 0
      rapyutarobotics.rr_io.deployments:
        name: "{{ prefix_name }}_simulator"
        component_name: gazebo
        present: "{{ present }}"
        package_name: "{{ prefix_name }}_simulator"
        package_version: "{{ simulator_version }}"
        depends:
          deployments:
            - "{{ prefix_name }}_gwm_cloud"
        component_params: "{{ temp_package_arguments.simulator }}"
      register: simulator_deploy_id


- name: Async wait on deployments
  hosts: localhost
  strategy: free
  connection: local
  tasks:
    - name: "DB, GWM CLOUD, AMR UI, SIMULATOR DEPLOYMENTS - check on async status"
      async_status:
        jid: "{{ item.ansible_job_id}}"
      register: amr_log
      until: amr_log.finished
      retries: 600
      delay: 20
      when:
        - ansible_async|bool == true
      loop:
      - "{{ db_deploy_id }}"
      - "{{ gwm_cloud_deploy_id }}"
      - "{{ amr_ui_cloud_deploy_id }}"
      - "{{ simulator_deploy_id }}"

    - name: dump test output
      debug:
        msg: '{{ item }}'
      when: ansible_async|bool == true
      loop:
      - "{{ db_deploy_id }}"
      - "{{ gwm_cloud_deploy_id }}"
      - "{{ amr_ui_cloud_deploy_id }}"
      - "{{ simulator_deploy_id }}"
