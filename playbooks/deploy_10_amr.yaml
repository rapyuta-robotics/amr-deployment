- name: Secrets, Networks, Static Routes
  hosts: localhost
  strategy: free
  connection: local
  tasks:
    - copy:
        src: rio_amr_pa.json
        dest: /tmp/rio_amr_pa.json
    - copy:
        src: rio_amr_ui.json
        dest: /tmp/rio_amr_ui.json
    - copy:
        src: rio_db.json
        dest: /tmp/rio_db.json
    - copy:
        src: rio_gazebo.json
        dest: /tmp/rio_gazebo.json
    - copy:
        src: rio_gbc.json
        dest: /tmp/rio_gbc.json
    - copy:
        src: rio_gwm.json
        dest: /tmp/rio_gwm.json
    - name: Docker Secret
      async: 100
      poll: 0
      abhinavg97.rr_io.secrets:
        name: dockerhub
        present: "{{ present }}"
        type: docker
        username: ioamrreadonly
        password: "{{ docker_password }}"
        email: rss2.admin@rapyuta-robotics.com
      register: docker_secret_id
    - name: Network Deployment
      async: 100
      poll: 0
      abhinavg97.rr_io.networks:
        name: "{{ prefix_name }}_native_network"
        present: "{{ present }}"
        type: native_network
        ros_distro: melodic
        resource_type: small
      register: native_network_id
    - name: GWM Static Route
      async: 100
      poll: 0
      abhinavg97.rr_io.networks:
        name: "{{ prefix_name }}-gwm"
        present: "{{ present }}"
        type: static_route
      register: gwm_static_route_id
    - name: GBC Static Route
      async: 100
      poll: 0
      abhinavg97.rr_io.networks:
        name: "{{ prefix_name }}-gbc"
        present: "{{ present }}"
        type: static_route
      register: gbc_static_route_id
    - name: AMR UI Static Route
      async: 100
      poll: 0
      abhinavg97.rr_io.networks:
        name: "{{ prefix_name }}-amr-ui"
        present: "{{ present }}"
        type: static_route
      register: amr_ui_static_route_id
    - name: Gazebo UI Static Route
      async: 100
      poll: 0
      abhinavg97.rr_io.networks:
        name: "{{ prefix_name }}-gazebo-ui"
        present: "{{ present }}"
        type: static_route
      register: gazebo_ui_static_route_id
    - name: rio_amr_pa package
      async: 1250
      poll: 0
      abhinavg97.rr_io.packages:
        version: auto
        name: rio_amr_pa
        present: "{{ present }}"
        type: docker
        build: rio_amr_pa
        docker_image: "{{ rio_amr_pa_image }}"
        secret: dockerhub
        manifest_path: /tmp/rio_amr_pa.json
      register: rio_amr_pa_package_id
    - name: rio_gwm_ui package
      async: 1000
      poll: 0
      abhinavg97.rr_io.packages:
        version: auto
        name: rio_gwm_ui
        present: "{{ present }}"
        type: docker
        docker_image: "{{ rio_gwm_ui_image }}"
        build: rio_gwm_ui
        secret: dockerhub
        manifest_path: /tmp/rio_amr_ui.json
      register: rio_gwm_ui_package_id
    - name: rio_db package
      async: 1000
      poll: 0
      abhinavg97.rr_io.packages:
        version: auto
        name: rio_db
        present: "{{ present }}"
        type: docker
        docker_image: "{{ rio_db_image }}"
        secret: dockerhub
        manifest_path: /tmp/rio_db.json
      register: rio_db_package_id
    - name: rio_gazebo package
      async: 1250
      poll: 0
      abhinavg97.rr_io.packages:
        version: auto
        name: rio_gazebo
        present: "{{ present }}"
        type: docker
        docker_image: "{{ rio_amr_pa_image }}"
        build: rio_amr_pa
        secret: dockerhub
        manifest_path: /tmp/rio_gazebo.json
      register: rio_gazebo_package_id
    - name: rio_gbc package
      async: 1250
      poll: 0
      abhinavg97.rr_io.packages:
        version: auto
        name: rio_gbc
        present: "{{ present }}"
        type: docker
        docker_image: "{{ rio_amr_pa_image }}"
        build: rio_amr_pa
        secret: dockerhub
        manifest_path: /tmp/rio_gbc.json
      register: rio_gbc_package_id
    - name: rio_gwm package
      async: 1000
      poll: 0
      abhinavg97.rr_io.packages:
        version: auto
        name: rio_gwm
        present: "{{ present }}"
        type: docker
        docker_image: "{{ rio_gwm_image }}"
        build: rio_gwm
        secret: dockerhub
        manifest_path: /tmp/rio_gwm.json
      register: rio_gwm_package_id
- name: DB, GWM, GBC, AMR UI Deployments
  hosts: localhost
  strategy: free
  connection: local
  tasks:
    - name: DB Deployment
      async: 100
      poll: 0
      abhinavg97.rr_io.deployments:
        name: "{{ prefix_name }}_postgres"
        component_name: postgres
        present: "{{ present }}"
        package_name: rio_db
        component_params:
          POSTGRES_DB: gwm_core
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
      register: db_deploy_id
    - name: GWM deployment
      async: 2000
      poll: 0
      abhinavg97.rr_io.deployments:
        name: "{{ prefix_name }}_rr_gwm"
        component_name: core
        present: "{{ present }}"
        package_name: rio_gwm
        depends:
          deployments:
            - "{{ prefix_name }}_postgres"
        networks:
          static_routes:
            - name: "{{ prefix_name }}-gwm"
              endpoint_name: GWM_CORE_URL
        component_params:
          AUTOBOOTSTRAP: true
          DEBUG: true
          DJANGO_LOG_LEVEL: WARNING
      register: rr_gwm_deploy_id
    - name: GBC deployment
      async: 2200
      poll: 0
      abhinavg97.rr_io.deployments:
        name: "{{ prefix_name }}_rr_gbc"
        component_name: gbc
        present: "{{ present }}"
        package_name: rio_gbc
        depends:
          deployments:
            - "{{ prefix_name }}_postgres"
            - "{{ prefix_name }}_rr_gwm"
        networks:
          static_routes:
            - name: "{{ prefix_name }}-gbc"
              endpoint_name: GWM_INTERFACE_ENDPOINT
          native_networks:
            - name: "{{ prefix_name }}_native_network"
        component_params:
          GWM_INTERFACE_SITE: tatsumi
          AUTOBOOTSTRAP: true
          GWM_INTERFACE_ORG_ID: 1
          GWM_AUTH_TOKEN: autobootstrap
          IO_AMR_GWM_INTERFACE_NODE_NAME: rr_gwm_interface
          ROSCONSOLE_FORMAT: "[$${severity}] [$${time}] [$${node} $${logger} $${function} $${line}]: $${message}"
      register: rr_gbc_deploy_id
    - name: AMR UI  deployment
      async: 2600
      poll: 0
      abhinavg97.rr_io.deployments:
        name: "{{ prefix_name }}_amr_ui"
        component_name: gwm-ui
        present: "{{ present }}"
        package_name: rio_gwm_ui
        depends:
          deployments:
            - "{{ prefix_name }}_rr_gwm"
            - "{{ prefix_name }}_rr_gbc"
        networks:
          static_routes:
            - name: "{{ prefix_name }}-amr-ui"
              endpoint_name: GWM_UI
        component_params:
          SKIP_PREFLIGHT_CHECK: true
          GWM_API_VERSION: v1
          DEFAULT_GWM_INTERFACE_HOST: gbc
          DEFAULT_GWM_INTERFACE_PORT: 8080
          DEFAULT_GWM_INTERFACE_PROTOCOL: ws
      register: amr_ui_deploy_id
- name: Gazebo and AMR deployments
  hosts: localhost
  strategy: free
  connection: local
  tasks:
    - name: Gazebo Deployment
      async: 2000
      poll: 0
      abhinavg97.rr_io.deployments:
        name: "{{ prefix_name }}_gazebo"
        component_name: gazebo
        component_alias: gazebo
        present: "{{ present }}"
        package_name: rio_gazebo
        networks:
          static_routes:
            - name: "{{ prefix_name }}-gazebo-ui"
              endpoint_name: VNC_EP
          native_networks:
            - name: "{{ prefix_name }}_native_network"
        component_params:
          VNC_PASSWORD: rapyuta
          VNC_RESOLUTION: 1920x1080
          DEBUG: true
          RACK: true
          WORLD: tatsumi
          ITEM_SPAWN_FROM: AUTO
          GWM_AUTH_TOKEN: autobootstrap
      register: gazebo_deploy_id
    - name: AMR Deployment
      async: 2000
      poll: 0
      abhinavg97.rr_io.deployments:
        name: "{{ prefix_name }}_amr{{ item.id }}"
        component_name: amr
        component_alias: "amr{{ item.id }}"
        present: "{{ present }}"
        package_name: rio_amr_pa
        networks:
          native_networks:
            - name: "{{ prefix_name }}_native_network"
        component_params:
          ROBOT_MODEL: rr_pa_amr
          ROBOT_NAV_MODEL: rr_pa_amr
          NAV_STRATEGY: graph_guided
          MAP: tatsumi
          MAP_ID: 1
          WORLD2MAP_X: 0
          WORLD2MAP_Y: 0
          WORLD2MAP_Z: 0
          WORLD2MAP_YAW: 0
          IDLE_TIMEOUT: "{{ amr_idle_timeout }}"
          CHARGE_TIME: "{{ amr_charge_time }}"
          AGENT_ID: "{{ item.id }}"
          X_POS: "{{ item.x }}"
          Y_POS: "{{ item.y }}"
          Z_POS: 0.0
          YAW: 1.57
          CHARGE_POS_X: "{{ item.charge_x }}"
          CHARGE_POS_Y: "{{ item.charge_y }}"
          CHARGE_POS_YAW: 0.0
          IDLE_POS_X: "{{ item.idle_x }}"
          IDLE_POS_Y: "{{ item.idle_y }}"
          IDLE_POS_YAW: 1.57
          ENABLE_SAFETY_ZONES: true
      loop: "{{  agent_list  }}"
      register: amr_id
    - name: "AMR - check on async status"
      async_status:
        jid: "{{ item.ansible_job_id}}"
      register: amr_log
      until: amr_log.finished
      retries: 60
      delay: 20
      when: "{{ present }}"
      with_items: "{{ amr_id.results }}"
    - name: dump test output
      debug:
        msg: '{{ item }}'
      with_items: "{{ amr_id.results }}"
    - name: "wait for UI to come up"
      uri:
        url: "https://{{ prefix_name }}-gwm-kqdbp.ep-r.io/v1/site/1"
        method: GET
        headers:
          accept: "application/json"
          X-RRAMR-Org: "1"
          Authorization: "token autobootstrap"
        status_code: 200
      when: "{{ present }}"
      register: result
      until: result.status == 200
      retries: 60
      delay: 20
    - name: "Pause to wait for UI to finish building"
      wait_for:
        timeout: 60
      when: "{{ present }}"
    - name: "Adding Agents to db"
      uri:
        url: "https://{{ prefix_name }}-gwm-kqdbp.ep-r.io/v1/agent"
        method: POST
        headers:
          accept: "application/json"
          X-RRAMR-Org: "1"
          X-RRAMR-Site: "1"
          Authorization: "token autobootstrap"
        body: '{"id": {{ item }}, "name": "agent{{ item }}", "robot_id": {{ item }}, "robot_descriptor_id": {{ item }}, "map": 1}'
        body_format: json
        status_code:
          - "200"
          - "201"
          - "409"
      when: "{{ present }}"
      with_sequence: start=1 end={{ agent_list|length }}


